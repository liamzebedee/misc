package org.emonic.base;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IExtensionPoint;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Plugin;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.jobs.Job;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.application.WorkbenchAdvisor;
import org.eclipse.ui.commands.ICommandService;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.ui.progress.IProgressConstants;
import org.eclipse.ui.progress.WorkbenchJob;
import org.emonic.base.codecompletion.CCAdministration;
import org.emonic.base.codecompletion.CCExecutionListener;
import org.emonic.base.codecompletion.jobs.AssemblyShallowExtractorJob;
import org.emonic.base.codecompletion.jobs.SourceShallowExtractorJob;
import org.emonic.base.documentation.IDocumentationParser;
import org.emonic.base.preferences.DefaultPrefsSetter;
import org.osgi.framework.BundleContext;

/**
 * The main plugin class to be used in the desktop.
 */
public class EMonoPlugin extends AbstractUIPlugin {

	//id of the plugin
	public static final String PLUGIN_ID = "org.emonic.base"; //$NON-NLS-1$

	private static final String ID_EXTENSION_POINT_DOCUMENTATION = PLUGIN_ID + ".documentation"; //$NON-NLS-1$

	// The shared instance
	private static EMonoPlugin plugin;

	private IDocumentationParser[] parsers = new IDocumentationParser[0];

	/**
	 * The constructor.
	 */
	public EMonoPlugin() {
		super();
		plugin = this;
	}

	/**
	 * This method is called upon plug-in activation
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
		// Set the preferences
		getPreferenceStore();
		DefaultPrefsSetter.initializeDefaults();

		IExtensionPoint extensionPoint= Platform.getExtensionRegistry().getExtensionPoint(ID_EXTENSION_POINT_DOCUMENTATION);
		if (extensionPoint != null) {
			IConfigurationElement[] configs= extensionPoint.getConfigurationElements();
			int length = configs.length;
			parsers = new IDocumentationParser[length];
			for (int i= 0; i < length; i++) {
				parsers[i] = (IDocumentationParser) configs[i].
						createExecutableExtension("class"); //$NON-NLS-1$
			}
		}

		//read in assemblies from GAC
		AssemblyShallowExtractorJob gacExtractJob = new AssemblyShallowExtractorJob("Extract GAC assemblies for code completion", null);
		gacExtractJob.schedule();

		//read in from opened projects
		//assemblies and src-files
		IProject[] project = ResourcesPlugin.getWorkspace().getRoot().getProjects();

		for(int i = 0; i< project.length; i++){
			//only add open projects
			if(project[i].isOpen()){
				//add project to cc
				CCAdministration.getInstance().addProject(project[i]);

				//read in sources from project
				SourceShallowExtractorJob srcProjExtractJob = 
						new SourceShallowExtractorJob("Extract project code files", project[i] );
				srcProjExtractJob.schedule(1000);

				//read in assemblies from project
				AssemblyShallowExtractorJob dllProjExtractJob =
						new AssemblyShallowExtractorJob("Extract project assemblies...", project[i]);
				dllProjExtractJob.schedule(1000);
			}
		}
		//add CCListener
		//		CCResourceListener ccResourceListener = new CCResourceListener();


		WorkbenchJob job = new WorkbenchJob("Do Work") {
			public IStatus runInUIThread(IProgressMonitor monitor) {
				//register CCListener...
				ICommandService commandService = (ICommandService) PlatformUI.getWorkbench().getService( ICommandService.class );
				if (commandService != null) {
					CCExecutionListener ccExecutionListener = new CCExecutionListener();
					commandService.addExecutionListener( ccExecutionListener );
				}
				return new Status(Status.OK, PLUGIN_ID, Status.OK, "Ok.", null);
			}
		};
		job.setUser(true);
		job.schedule();
	}

	/**
	 * This method is called when the plug-in is stopped
	 */
	public void stop(BundleContext context) throws Exception {
		super.stop(context);
	}

	public IDocumentationParser[] getParsers() {
		return parsers;
	}

	/**
	 * Returns the shared instance.
	 */
	public static EMonoPlugin getDefault() {	
		return plugin;
	}


	public static Status makeStatus(int errorLevel, String message, Throwable e) {
		return new Status(errorLevel, PLUGIN_ID, errorLevel, message, e);
	}

	/** 
	 * Returns the relative path of the image 
	 */	
	public static ImageDescriptor imageDescriptorFromPlugin(String string) {
		return imageDescriptorFromPlugin(EMonoPlugin.PLUGIN_ID, string);
	} 
}
